package v2

// GrantType represents the grant type used in the OAuth2 protocol.
type GrantType int

const (
	// GrantTypeInitial is the initial grant type.
	GrantTypeInitial GrantType = iota
	// GrantTypeRefresh is the refresh grant type.
	GrantTypeRefresh
)

// TokenRequest represents a request to generate an OAuth2 token.
type TokenRequest struct {
	// Assertion is the assertion used to generate the token.
	Assertion string `json:"assertion,omitempty"`
	// RefreshToken is the refresh token used to generate the token.
	RefreshToken string `json:"refresh_token,omitempty"`
	// GrantType is the grant type used to generate the token.
	GrantType string `json:"grant_type"`
	// ClientID is the client ID used to generate the token.
	ClientId string `json:"client_id"`
	// ClientSecret is the client secret used to generate the token.
	ClientSecret string `json:"client_secret"`
	// Scope is the scope used to generate the token.
	Scope string `json:"scope,omitempty"`
}

// String() returns a string representation of the grant type.
func (g GrantType) String() string {
	switch g {
	case GrantTypeInitial:
		return "urn:ietf:params:oauth:grant-type:jwt-bearer"
	case GrantTypeRefresh:
		return "refresh_token"
	default:
		return "unknown"
	}
}

// TokenResponse represents a response to generate an OAuth2 token.
type TokenResponse struct {
	// AccessToken is the access token generated by the server.
	AccessToken string `json:"access_token"`
	// RefreshToken is the refresh token generated by the server.
	RefreshToken string `json:"refresh_token,omitempty"`
	// TokenType is the type of token generated by the server.
	TokenType string `json:"token_type"`
	// ExpiresIn is the number of seconds until the token expires.
	ExpiresIn int `json:"expires_in"`
	// Scope is the scope of the token.
	Scope string `json:"scope"`
}
